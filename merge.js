// Generated by CoffeeScript 1.3.3
var c, canvas, combinations, divideQuadrants, e, h, i, parts, pixels, size, w, weightMerger, x, y, _i, _j, _len, _ref;

canvas = document.getElementById('c');

c = canvas.getContext('2d');

size = 1024;

canvas.width = canvas.height = size;

c.fillStyle = '#007fff';

for (i = _i = 0; _i < 290; i = ++_i) {
  x = Math.random() * size;
  y = Math.random() * size;
  w = Math.random() * 8 + 1;
  c.fillRect((x - w) + .5, (y - w) + .5, w * 2, w * 2);
}

pixels = c.getImageData(0, 0, size, size).data;

combinations = function(list) {
  var a, b, newlist, _j, _k, _ref;
  newlist = [];
  for (a = _j = 0, _ref = list.length; 0 <= _ref ? _j < _ref : _j > _ref; a = 0 <= _ref ? ++_j : --_j) {
    for (b = _k = 0; 0 <= a ? _k < a : _k > a; b = 0 <= a ? ++_k : --_k) {
      newlist.push([list[a], list[b]]);
    }
  }
  return newlist;
};

weightMerger = function(_arg, _arg1) {
  var a1, a2, amax, asum, bound, h1, h2, maxh, maxw, maxx, maxy, minx, miny, w1, w2, waste, waste1, waste2, x1, x2, y1, y2;
  x1 = _arg[0], y1 = _arg[1], w1 = _arg[2], h1 = _arg[3], waste1 = _arg[4];
  x2 = _arg1[0], y2 = _arg1[1], w2 = _arg1[2], h2 = _arg1[3], waste2 = _arg1[4];
  minx = Math.min(x1, x2);
  miny = Math.min(y1, y2);
  maxx = Math.max(x1 + w1, x2 + w2);
  maxy = Math.max(y1 + h1, y2 + h2);
  maxw = maxx - minx;
  maxh = maxy - miny;
  a1 = w1 * h1;
  a2 = w2 * h2;
  asum = a1 + a2;
  amax = maxw * maxh;
  waste = waste1 + waste2 + Math.max(0, amax - asum);
  bound = [minx, miny, maxw, maxh, waste];
  if (!((y1 + h1) < y2 || y1 > (y2 + h2) || (x1 + w1) < x2 || x1 > (x2 + w2))) {
    return [-1, bound];
  }
  if (amax - asum > Math.pow(40, 2)) {
    return null;
  }
  return [waste, bound];
};

divideQuadrants = function(x, y, w, h) {
  var a, b, bound, box, boxes, j, k, pair, pairs, score, sorted, weight, _j, _len, _ref, _ref1;
  if (w === 1 && h === 1) {
    if (pixels[4 * (y * size + x) + 3] > 0) {
      return [[x, y, 1, 1, 0]];
    } else {
      return [];
    }
  }
  boxes = [];
  _ref = [0, 1, 2, 3];
  for (_j = 0, _len = _ref.length; _j < _len; _j++) {
    k = _ref[_j];
    i = x + ((k % 2) * w / 2);
    j = y + (Math.floor(k / 2) * h / 2);
    boxes = boxes.concat(divideQuadrants(i, j, w / 2, h / 2));
  }
  while (true) {
    pairs = (function() {
      var _k, _len1, _ref1, _ref2, _results;
      _ref1 = combinations(boxes);
      _results = [];
      for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
        _ref2 = _ref1[_k], a = _ref2[0], b = _ref2[1];
        weight = weightMerger(a, b);
        if (weight) {
          _results.push(weight.concat([a, b]));
        } else {
          _results.push(null);
        }
      }
      return _results;
    })();
    pairs = (function() {
      var _k, _len1, _results;
      _results = [];
      for (_k = 0, _len1 = pairs.length; _k < _len1; _k++) {
        pair = pairs[_k];
        if (pair !== null) {
          _results.push(pair);
        }
      }
      return _results;
    })();
    if (pairs.length === 0) {
      break;
    }
    sorted = pairs.sort(function(a, b) {
      return a[0] - b[0];
    });
    _ref1 = sorted[0], score = _ref1[0], bound = _ref1[1], a = _ref1[2], b = _ref1[3];
    boxes = (function() {
      var _k, _len1, _results;
      _results = [];
      for (_k = 0, _len1 = boxes.length; _k < _len1; _k++) {
        box = boxes[_k];
        if (box !== a && box !== b) {
          _results.push(box);
        }
      }
      return _results;
    })();
    boxes.push(bound);
  }
  return boxes;
};

c.strokeStyle = "black";

console.time("merge");

parts = divideQuadrants(0, 0, size, size);

console.timeEnd("merge");

for (_j = 0, _len = parts.length; _j < _len; _j++) {
  _ref = parts[_j], x = _ref[0], y = _ref[1], w = _ref[2], h = _ref[3], e = _ref[4];
  console.log(x, y, w, h, e / (w * h));
  c.strokeRect(x + 0.5, y + 0.5, w, h);
}
